require('dotenv').config();

const TelegramBot = require('node-telegram-bot-api');

const fs = require('fs');

const token = process.env.BOT_TOKEN;

const bot = new TelegramBot(token, { polling: true });

const defaultPhotoUrl = "https://i.imgur.com/Q4zN9jG.png";


const testQuestions = require('./data/testQuestions');
const specialties = require('./data/testSpecialties');
const generalSpecialties = require('./data/generalSpecialties')
const commands = require('./data/commands')

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å, –æ—á–∫–∏)
const userStates = {}; 



function getMainMenuKeyboard() {
    return {
        keyboard: [
            [{ text: '–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å' }],
            [{ text: '–°–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π' }]
        ],
        one_time_keyboard: true,
        resize_keyboard: true
    };
}

function getBackToMenuKeyboard() {
    return {
        keyboard: [
            [{ text: '–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' }]
        ],
        one_time_keyboard: true,
        resize_keyboard: true
    };
}

function getBackToSpecialtiesKeyboard() {
    return {
        keyboard: [
            [{ text: '–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π' }],
            [{ text: '–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' }]
        ],
        one_time_keyboard: true,
        resize_keyboard: true
    };
}

bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    delete userStates[chatId];
    sendFirstMainMenu(chatId);
});
bot.onText(/\/test/, (msg) => {
    const chatId = msg.chat.id;
    delete userStates[chatId]; 
    startTest(chatId); 
});
bot.onText(/\/specialty/, (msg) => {
    const chatId = msg.chat.id;
    delete userStates[chatId]; 
    showSpecialtyCategories(chatId); 
});

function sendFirstMainMenu(chatId) {
    bot.sendMessage(chatId, `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ IT.
    \n\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ /test.
    \n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π, –Ω–∞–∂–º–∏—Ç–µ /specialty.`, { reply_markup: getMainMenuKeyboard() });
    userStates[chatId] = { state: 'idle' };
}

function sendMainMenu(chatId) {
    bot.sendMessage(chatId, `–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å, –∫–∞–∫–∞—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥—Ö–æ–¥–∏—Ç –∏–º–µ–Ω–Ω–æ –≤–∞–º?\n
üöÄ –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:`, { reply_markup: getMainMenuKeyboard() });
    userStates[chatId] = { state: 'idle' };
}
bot.setMyCommands(commands)

bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    const messageText = msg.text;

    if (!userStates[chatId]) {
        userStates[chatId] = { state: 'idle' };
    }

    const currentState = userStates[chatId].state;

    if (currentState === 'idle') {
        if (messageText === '–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å') {
            startTest(chatId);
        } else if (messageText === '–°–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π') {
            showSpecialtyCategories(chatId);
        } else if (messageText === '/start' || messageText === "/test" || messageText === "/specialty") {
    
        }
         else {
            bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∏–∂–µ:', { reply_markup: getMainMenuKeyboard() });
        }
    } else if (currentState === 'testing') {
        if (userStates[chatId].currentQuestionIndex >= testQuestions.length) {
            // –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç, –Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ –µ—â–µ 'testing', –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
            console.warn(`User ${chatId} in testing state, but no more questions. Forcing finishTest.`);
            finishTest(chatId);
        } else {

            handleTestAnswer(chatId, messageText);
        }
    }else if (currentState === 'choosing_category') {
        if (messageText === '/test') {
            startTest(chatId); 
        } else {
            handleCategorySelection(chatId, messageText); 
        } 
    }else if (currentState === 'choosing_specialty') {
        handleSpecialtySelection(chatId, messageText);
    } else if (currentState === 'viewing_specialty_info') {
        handleNavigationFromSpecialtyInfo(chatId, messageText);
    }
});


function startTest(chatId) {
    userStates[chatId] = {
        state: 'testing',
        currentQuestionIndex: 0,
        scores: {}
    };
    askQuestion(chatId, 0);
}

function askQuestion(chatId, questionIndex) {
    const currentState = userStates[chatId];
    const totalQuestions = testQuestions.length;
    const questionData = testQuestions[questionIndex];


    let questionTextWithList = `--- –í–æ–ø—Ä–æ—Å ${questionIndex + 1}/${totalQuestions} ---\n\n`; 
    questionTextWithList += `${questionData.question}\n\n`;

    const keyboardButtonsPerRow = []; 

    questionData.options.forEach((option, index) => {
        questionTextWithList += `${index + 1}. ${option.text}\n`;
        keyboardButtonsPerRow.push({ text: `${index + 1}` });
    });

    const replyMarkupKeyboard = keyboardButtonsPerRow.map(button => [button]);

    const options = {
        reply_markup: {
            keyboard: replyMarkupKeyboard, 
            one_time_keyboard: true,
            resize_keyboard: true
        }
    };

    const photoToSend = questionData.photoUrl || defaultPhotoUrl;

    bot.sendPhoto(chatId, photoToSend, { caption: questionTextWithList, ...options })
        .then(() => {
            
        })
        .catch((error) => {
            console.error(`–ù–∞ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ${questionIndex + 1} to chatId ${chatId}:`, error);
            bot.sendMessage(chatId, questionTextWithList, options);
        });
}

function handleTestAnswer(chatId, answerText) {
    const currentState = userStates[chatId];
    const currentQuestionIndex = currentState.currentQuestionIndex;
    const questionData = testQuestions[currentQuestionIndex];

    const selectedOptionIndex = parseInt(answerText) - 1;
    
    if (selectedOptionIndex >= 0 && selectedOptionIndex < questionData.options.length) {
        const selectedOption = questionData.options[selectedOptionIndex];

        if (!currentState.scores) {
            currentState.scores = {};
        }

        for (const specialty in selectedOption.score) {
            currentState.scores[specialty] = (currentState.scores[specialty] || 0) + selectedOption.score[specialty];
        }

        currentState.currentQuestionIndex++;

        if (currentState.currentQuestionIndex >= testQuestions.length) {
            finishTest(chatId);
        } else {
            askQuestion(chatId, currentState.currentQuestionIndex);
        }
    } else {
        const retryKeyboard = questionData.options.map((_, index) => [{ text: `${index + 1}` }]);
        bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –≤–≤–µ–¥—è –µ–≥–æ –Ω–æ–º–µ—Ä.', { 
            reply_markup: { 
                keyboard: retryKeyboard, 
                one_time_keyboard: true, 
                resize_keyboard: true 
            } 
        });
    }
}

function finishTest(chatId) {
    const currentState = userStates[chatId];

    if (!currentState || !currentState.scores) {
        console.error(`[${chatId}] Error: User state or scores missing in finishTest. Resetting.`);
        if (userStates[chatId]) {
            delete userStates[chatId];
        }
        sendMainMenu(chatId); 
        return;
    }

    const userScore = currentState.scores;
    let bestSpecialtyKey = null;
    let maxScore = -1;

    for (const specialtyKey in userScore) {
        if (userScore[specialtyKey] > maxScore) {
            maxScore = userScore[specialtyKey];
            bestSpecialtyKey = specialtyKey;
        }
    }

    let resultMessageHtml = "";

    if (bestSpecialtyKey && specialties[bestSpecialtyKey]) {
        const specialty = specialties[bestSpecialtyKey];
        const formattedSpecialtyName = `<b>${specialty.name}</b>`;
        
        resultMessageHtml = `–ü–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ç–µ—Å—Ç–∞, –≤–∞—à–∞ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∞—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: ${formattedSpecialtyName}.\n\n${specialty.description}`;

        if (specialty.url) {
            resultMessageHtml += `\n\n<a href="${specialty.url}">üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>`;
        }
        
        const photoIdentifier = specialty.photoUrl || defaultPhotoUrl;

        bot.sendPhoto(chatId, photoIdentifier, { caption: resultMessageHtml, parse_mode: 'HTML' })
            .then(() => {

                setTimeout(() => {
                    sendMainMenu(chatId);
                }, 3000); 
                delete userStates[chatId]; 
            })
            .catch(() => {
                bot.sendMessage(chatId, resultMessageHtml, { parse_mode: 'HTML' })
                    .then(() => {
                        setTimeout(() => {
                            sendMainMenu(chatId);
                        }, 3000);
                        delete userStates[chatId];
                    })
                    .catch((textError) => {
                        console.error(`Error sending fallback text message:`, textError);
                        delete userStates[chatId]; 
                    });
            });
    } else {
        resultMessageHtml = "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –µ—â–µ —Ä–∞–∑.";
        
        bot.sendMessage(chatId, resultMessageHtml) 
            .then(() => {
                setTimeout(() => {
                    sendMainMenu(chatId);
                }, 3000);
                delete userStates[chatId];
            })
            .catch((textError) => {
                console.error(`Error sending message when no specialty found:`, textError);
                delete userStates[chatId];
            });
    }
}

function handleCategorySelection(chatId, selectedCategoryName) {
    if (selectedCategoryName === '–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é') {
        sendMainMenu(chatId);
        delete userStates[chatId];
        return;
    }

    const selectedCategoryKey = Object.keys(generalSpecialties).find(key => generalSpecialties[key].name === selectedCategoryName);

    if (selectedCategoryKey) {
        const categoryData = generalSpecialties[selectedCategoryKey];
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const specialtyButtons = Object.keys(categoryData.specialties).map(key => {
            return [{ text: categoryData.specialties[key].name }];
        });

        specialtyButtons.push([{ text: '–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' }], [{ text: '–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' }]); // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

        const options = {
            reply_markup: {
                keyboard: specialtyButtons,
                one_time_keyboard: true,
                resize_keyboard: true
            }
        };
        bot.sendMessage(chatId, `–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${categoryData.name}":`, options);
        userStates[chatId] = { state: 'choosing_specialty', currentCategoryKey: selectedCategoryKey };
    } else {
         const errorMessage = '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π:';
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–Ω–æ–≤–∞, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        const specialtyButtons = Object.keys(categoryData.specialties).map(key => {
            return [{ text: categoryData.specialties[key].name }];
        });
        specialtyButtons.push([{ text: '–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' }], [{ text: '–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' }]);

        const options = {
            reply_markup: {
                keyboard: specialtyButtons,
                one_time_keyboard: true,
                resize_keyboard: true
            }
        };
        bot.sendMessage(chatId, errorMessage, options);
    }
}
function showSpecialtyCategories(chatId) {
    const categoryButtons = Object.keys(generalSpecialties).map(key => {
        return [{ text: generalSpecialties[key].name }];
    });

    categoryButtons.push([{ text: '–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' }]);

    const options = {
        reply_markup: {
            keyboard: categoryButtons,
            one_time_keyboard: true,
            resize_keyboard: true
        }
    };
    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π:', options);
    userStates[chatId] = { state: 'choosing_category' };
}


function handleSpecialtySelection(chatId, selectedSpecialtyName) {
    if (selectedSpecialtyName === '–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é') {
        sendMainMenu(chatId);
        delete userStates[chatId];
        return;
    } else if (selectedSpecialtyName === '–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏') {
        showSpecialtyCategories(chatId);
        return;
    }

    const currentCategoryKey = userStates[chatId].currentCategoryKey;
    if (!currentCategoryKey || !generalSpecialties[currentCategoryKey]) {
        showSpecialtyCategories(chatId);
        return;
    }

    const categoryData = generalSpecialties[currentCategoryKey];
    const specialtyKey = Object.keys(categoryData.specialties).find(key => categoryData.specialties[key].name === selectedSpecialtyName);

    if (specialtyKey) {
        const specialty = categoryData.specialties[specialtyKey]; 

        const formattedSpecialtyName = `<b>${specialty.name}</b>`;
        let messageHtml = `${formattedSpecialtyName}\n\n${specialty.description}`;

        if (specialty.url) {
            messageHtml += `\n\n<a href="${specialty.url}">üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>`;
        }

        const photoIdentifier = specialty.fileId || defaultPhotoUrl;
        bot.sendPhoto(chatId, photoIdentifier, { caption: messageHtml, parse_mode: 'HTML' })
            .then(() => {
                
            })
            .catch((error) => {
                console.error(`–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–ø–≤–∏—Ç—å —Ñ–æ—Ç–æ ${chatId}:`, error);
                bot.sendMessage(chatId, messageHtml, { parse_mode: 'HTML' });
            });

        setTimeout(() => {
            bot.sendMessage(chatId, '–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', { reply_markup: getBackToSpecialtiesKeyboard() }); // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π" –≤–µ–ª–∞ –∫ showSpecialtiesList(chatId, categoryData, currentCategoryKey);
        }, 1000);

        userStates[chatId] = { state: 'viewing_specialty_info', currentCategoryKey: currentCategoryKey, currentSpecialtyKey: specialtyKey };
    } else {
        showSpecialtiesList(chatId, categoryData, currentCategoryKey);
    }
}

function handleNavigationFromSpecialtyInfo(chatId, buttonText) {
    if (buttonText === '–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π') {
        showSpecialtyCategories(chatId);
    } else if (buttonText === '–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é') {
        sendMainMenu(chatId);
        delete userStates[chatId];
    }
}

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...');